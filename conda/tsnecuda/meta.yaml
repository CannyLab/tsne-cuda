# Copyright (c) 2021 Regents of the University of California
#
# This software is released under the MIT License.
# https://opensource.org/licenses/MIT

{% set name = "tsnecuda" %}
{% set version = environ.get('GIT_DESCRIBE_TAG').lstrip('v') %}
{% set number = GIT_DESCRIBE_NUMBER %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  git_url: ../../

build:
    number: {{ number }}

outputs:
  - name: tsnecuda
    script: build.sh
    build:
      string: "h{{ PKG_HASH }}_{{ number }}_cuda{{ cudatoolkit }}"
      run_exports:
        - {{ pin_compatible('tsnecuda', exact=True) }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - make
        - git
        - python >=3.6
        - libxml2
      host:
        - conda
        - cmake >=3.20
        - mkl-devel >=2018
        - blas =*=mkl
        - cudatoolkit-dev {{ cudatoolkit }}
        - faiss-gpu ==1.6.5
        - python >=3.6
        - numpy >=1.14
        - gflags
        - gtest
        - gmock
        - libxml2
      run:
        - mkl >=2018
        - blas =*=mkl
        - faiss-gpu ==1.6.5
        - {{ pin_compatible('python', min_pin='3.6') }}
        - {{ pin_compatible('cudatoolkit', max_pin='x.x') }}
        - {{ pin_compatible('numpy') }}
        - {{ pin_compatible('gflags') }}
        - {{ pin_compatible('gtest') }}
        - {{ pin_compatible('gmock') }}
        - {{ pin_compatible('libxml2') }}
    test:
      imports:
        - tsnecuda
        - tsnecuda.TSNE

about:
  home: https://github.com/CannyLab/tsne-cuda
  license: LICENSE.txt
  license_family: BSD
  license_file: ''
  summary: CUDA Implementation of T-SNE with Python bindings
  description: "===========\ntsnecuda\n===========\n\ntsnecuda provides an optimized CUDA implementation of the T-SNE algorithm by L Van der Maaten. tsnecuda is able to compute the T-SNE of large numbers\
    \ of points up to 1200 times faster than other leading libraries, and provides simple python bindings with a SKLearn style interface::\n\n    #!/usr/bin/env python\n\n    from tsnecuda import TSNE\n\
    \    embeddedX = TSNE(n_components=2).fit_transform(X)\n\nFor more information, check out the repository at https://github.com/rmrao/tsne-cuda. \n\n\n"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers:
    - DavidMChan
